<%@ taglib prefix="jca" uri="http://www.ptc.com/windchill/taglib/components"%>
<%@ taglib uri="http://www.ptc.com/windchill/taglib/fmt" prefix="fmt"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://www.ptc.com/windchill/taglib/partclient" prefix="partclient"%>
<%@ taglib prefix="wctags" tagdir="/WEB-INF/tags" %>

<%@ page import="com.ptc.core.components.descriptor.DescriptorConstants" %>
<%@ page import="com.ptc.windchill.enterprise.part.PartConstants" %>
<%@ page import="com.ptc.windchill.enterprise.part.partResource" %>
<%@ page import="com.ptc.windchill.uwgm.cadx.createecaddesign.documentECADResource" %>
<%@ page import="com.ptc.core.meta.type.mgmt.server.impl.TypeDomainHelper" %>

<%@ include file="/netmarkets/jsp/components/includeWizBean.jspf"%>

<%--
refreshCC.js below is required for refreshing local cache when part is created
in active workspace within uwgm browser.
--%>
<script type="text/javascript" SRC="templates/cadx/common/refreshCC.js"></script>

<%--
PartHelper.js below is required dynamically insert/remove the classification step
--%>
<script language="JavaScript" src="netmarkets/javascript/part/PartHelper.js"></script>

<%--
revisionLabelPicker.js is required if insert revision action is being performed.
--%>
<script language="JavaScript" src='netmarkets/javascript/util/revisionLabelPicker.js'></script>

<%--
CADDocument.js is required if a CAD document is created in the wizard.
--%>
<script type="text/javascript" src="netmarkets/javascript/uwgmcadx/CADDocument.js" ></script>

<fmt:setBundle basename="com.ptc.windchill.enterprise.part.partResource"/>

<fmt:message var="definePartWizStepLabel" key="part.createPartWizard.DEFINE_ITEM_WIZ_STEP_LABEL" />
<fmt:message var="setAttributesWizStepForCreateMultiPartLabel" key="part.createPartWizard.SET_IDENTITY_ATTRIBUTES_WIZ_STEP_LABEL" />
<fmt:message var="setAttributesWizStepLabel" key="part.createPartWizard.SET_ATTRIBUTES_WIZ_STEP_LABEL" />
<fmt:message var="setAttributesWizStepMultiCreateLabel" key="part.createPartWizard.SET_ATTRIBUTES_WIZ_STEP_MULTI_CREATE_LABEL" />
<fmt:message var="createMultiplePartWizardTitle" key="part.createMultiPart.WIZARD_LABEL" />
<fmt:message var="newCADDocWizStepLabel" key="part.createPartWizard.NEW_CAD_DOC_WIZ_STEP_LABEL" />

<partclient:multiPartWizardLaunch multiPart="isMultiPart"/>
<fmt:message var="wizardTitle" key="part.createPartWizard.title" />

<fmt:setBundle basename="com.ptc.windchill.uwgm.cadx.EcadActions.ecadActionsResource"/>
<fmt:message var="wizardTitleFromURL" key="${param.wizardWindowTitle}" />

<c:if test='${param.wizardWindowTitle != ""}'>
	<c:set var="wizardTitle" value="${wizardTitleFromURL}"/>
</c:if>

<%-- New CAD Doc panel populated from the New Part attributes --%>
<c:choose>
	<c:when  test='${param.showNewCADDocStep == "true"}'>
        <%-- Creating a part and possibly a CAD document and attachments in this wizard --%>
        <jca:initializeItem operation="${createBean.create}" objectHandle="<%=PartConstants.ObjectHandles.PART%>"
                    attributePopulatorClass="com.ptc.windchill.enterprise.part.forms.PartAttributePopulator" />

	<%
		String baseTypeName = "wt.epm.EPMDocument" ;
		String domain = TypeDomainHelper.getExchangeDomain();
		String typeName = "DefaultEPMDocument";
		String softType = baseTypeName + "|" + domain + "." + typeName;
	%>

		<jca:initializeItem operation="${createBean.create}" objectHandle="<%=PartConstants.ObjectHandles.CADDOC%>" baseTypeName="<%=softType%>" />
		<%-- To set operation for attachment step --%>
		<jca:initializeItem operation="${createBean.create}" />
	</c:when>

	<c:when  test='${param.showNewCADDocStep == "false"}'>
		<jca:initializeItem operation="${createBean.create}" objectHandle="<%=PartConstants.ObjectHandles.PART%>"
			attributePopulatorClass="com.ptc.windchill.enterprise.part.forms.PartAttributePopulator" />
	</c:when>
	
	<c:when  test='${param.isPlaceholderAction == "true"}'>
	<fmt:setBundle basename="com.ptc.windchill.enterprise.revisionControlled.insertWizardResource"/>
	<fmt:message var="wizardTitle" key="part.createNewPlaceholder.title" />
	<jca:initializeItem 
			operation="${createBean.create}" 
			baseTypeName="WCTYPE|wt.part.WTPart|wt.part.Placeholder"
			attributePopulatorClass="com.ptc.windchill.enterprise.part.forms.PartAttributePopulator" />
	</c:when>

	<c:otherwise>
        <%-- Creating a part and attachments in this wizard --%>
        <%-- populate number attribute for insert revision action only --%>
		<jca:initializeItem operation="${createBean.create}"
			attributePopulatorClass="com.ptc.windchill.enterprise.part.forms.PartAttributePopulator" />
	</c:otherwise>
</c:choose>

<%--
    Set the typeComponentId to restrict the containers to PDMLink
    containers i.e. Product and Library. This affects the setContext
    wizard step that only gets displayed while creating a part from
    a workspace that is associated to a product or a library or when launched from the
    Advanced Assembly Editor. For a workspace
    that is associated to a project, the step validator hides the setContext
    wizard step.
--%>
<c:if  test='${param.invokedfrom == "workspace" || param.showContextStep == "true"}'>
        <jsp:setProperty name="createBean"
                         property="contextPickerTypeComponentId" value="PDMLink.containerSearch"/>
	<jsp:setProperty name="createBean"
     			 property="contextPickerExcludeTypes" value="WCTYPE|wt.inf.library.WTLibrary|com.ptc.QMS"/>
</c:if>

<%-- Set the default part management help --%>
      <c:set var="helpKey" value="PartCreate_help" scope="page"/>
      <c:set var="buttonList" value="DefaultWizardButtonsNoApply" scope="page"/>

<%-->
Depending on if the wizard is multiple part create, different steps are included in main wizard. Label for setAttributesWizStep
is also different for multiple part create wizard.
<--%>

<!-- autoNaming fields for single part create wizard . restricted for multiPart wizard-->
<c:if test="${isMultiPart == 'false'}">
		<input id="enforceClassificationNamingRule" type="hidden" name="enforceClassificationNamingRule" >
		<input id="classificationNameOverride" type="hidden" name="classificationNameOverride" >
		<script>
			bundleHandler.set('com.ptc.core.ui.componentRB.NUMBER_GENERATED_DISPLAY_STRING', 'com.ptc.core.ui.componentRB.NUMBER_GENERATED_DISPLAY_STRING');
		</script>
</c:if>

<c:choose>
   <c:when test="${isMultiPart == 'true'}">
      <jca:wizard helpSelectorKey="PMPartMultipleCreate" buttonList="NewMultiPartsWizardButtons" title="${createMultiplePartWizardTitle}">
         <jca:wizardStep action="setContextWizStep"  type="object"/>
         <jca:wizardStep action="defineItemWizStep"  label="${definePartWizStepLabel}" type="object"/>
         <jca:wizardStep action="setAttributesWizStepForCreateMultiPart"  label="${setAttributesWizStepForCreateMultiPartLabel}" type="part" />
          <jca:wizardStep action="securityLabelStep" type="securityLabels"/>
      </jca:wizard>

      <!-- Hidden fields to store classification information -->
      <input id="selectedClfNodes" type="hidden" name="selectedClfNodes" >
	  <input id="selectedClfNodesDisplayName" type="hidden" name="selectedClfNodesDisplayName" >
      <input id="classificationAttributes" type="hidden" name="classificationAttributes" >

   </c:when>

   <c:when test='${param.showNewCADDocStep == "true"}'>
        <%-->
        Two object types might be created, so the object handle is included in the names
        of the steps. This sets the value of a variable in PartHelper.js so the
        classification step will have the correct name when it is attached or detached.
        <--%>
        <script language="Javascript">
        setPartObjectHandle('!~objectHandle~partHandle~!');
        </script>
        <%@include file="/netmarkets/jsp/attachments/initAttachments.jspf"%>

     <jca:wizard helpSelectorKey="${helpKey}" buttonList="${buttonList}" title="${wizardTitle}"
      			formProcessorController="com.ptc.windchill.enterprise.part.forms.CreatePartAndCADDocFormProcessorController" >
         <jca:wizardStep action="setContextWizStep" objectHandle="partHandle" type="object"/>
         <jca:wizardStep action="defineItemAttributesWizStep" objectHandle="<%=PartConstants.ObjectHandles.PART%>" type="object"/>
         <jca:wizardStep action="setClassificationAttributesWizStep" objectHandle="<%=PartConstants.ObjectHandles.PART%>" type="part"/>
         <jca:wizardStep action="securityLabelStep" objectHandle="<%=PartConstants.ObjectHandles.PART%>" type="securityLabels"/>
         <jca:wizardStep action="defineItemAttributesWizStepForCADDoc" objectHandle="<%=PartConstants.ObjectHandles.CADDOC%>" type="part" label="${newCADDocWizStepLabel}" />
         <jca:wizardStep action="attachments_step"  type="attachments" />
       </jca:wizard>
  </c:when>

    <c:when test='${param.showNewCADDocStep == "false"}'>
   <%@include file="/netmarkets/jsp/attachments/initAttachments.jspf"%>
      <jca:wizard helpSelectorKey="${helpKey}" buttonList="${buttonList}" title="${wizardTitle}">
         <jca:wizardStep action="setContextWizStep" objectHandle="<%=PartConstants.ObjectHandles.PART%>" type="object"/>
          <jca:wizardStep action="defineItemAttributesWizStep" objectHandle="<%=PartConstants.ObjectHandles.PART%>" type="object"/>
          <jca:wizardStep action="setClassificationAttributesWizStep" objectHandle="<%=PartConstants.ObjectHandles.PART%>" type="part"/>
          <jca:wizardStep action="securityLabelStep" objectHandle="<%=PartConstants.ObjectHandles.PART%>" type="securityLabels"/>
         <jca:wizardStep action="attachments_step"  type="attachments" />
      </jca:wizard>
  </c:when>

   <c:otherwise>
   <%@include file="/netmarkets/jsp/attachments/initAttachments.jspf"%>
      <jca:wizard helpSelectorKey="${helpKey}" buttonList="${buttonList}" title="${wizardTitle}">
         <jca:wizardStep action="setContextWizStep"  type="object"/>
         <jca:wizardStep action="defineItemAttributesWizStep"  type="object"/>
         <jca:wizardStep action="setClassificationAttributesWizStep" type="part"/>
         <jca:wizardStep action="securityLabelStep" type="securityLabels"/>
         <jca:wizardStep action="attachments_step"  type="attachments" />
      </jca:wizard>
   </c:otherwise>
</c:choose>

<%--- If we are not DTI then add the applet for doing file browsing and file uploads --%>
<wctags:fileSelectionAndUploadAppletUnlessMSOI forceApplet='${param.addAttachments != null }'/>

<script Language="JavaScript">
    /* Sets values of the hidden fields used for classification for multi part create wizard.
       Called by the form processor of the Set Classifications wizard.
    */
	function setClassificationAttributes(classificationAttributes) {
		document.getElementById('classificationAttributes').value=classificationAttributes;
	}
</script>


<script Language="JavaScript">
   /* Clicking the Apply button on a New Multi Parts wizard should reset the wizard to the initial step
      Overridden the Apply button in order to redirect the user to the first step */

   function onMultipartsApply() {

      onApply();
      var result = PTC.wizard.checkRequired(true, true, getCurrentStep());
      //Fixed SPR 2156604. Checking whether required attribute validation returns true or false.
      if(result) {
    	  setActiveStep(steps[0]);
          setNextStepDirty(); 
          disableOkButton();
          setStepClean(steps[1]);
          getMainForm().reset();
          clearActionFormData();
          resetOkButton();
      } else {
          setActiveStep(steps[1]);
      }
   }

    /* Clicking the Back button on a New Multi Parts wizard should skip the "nameNumberValidation"
	   Overridden the Back button */

   function onMultipartsBack() {
	    var stepIndex=0;
		var currentStepName = "";
		wizardSteps[currentStepStrName].afterServerVK = null;
		goBack();
		disableOkButton();
		stepIndex = findStepIndex(currentStepStrName);
		stepIndex = stepIndex + 1;
		currentStepName = steps[stepIndex];
		wizardSteps[currentStepName].afterServerVK = "nameNumberValidation";
		PTC.jca.state.getLocalStateStore().clear("multiPartWizAttributesTableDescriptor-grid-state");
    }
	
	       $2 = function(id) {
	    var r = $(id);

	    if(!r) {
	        var ar = Ext.DomQuery.select("[name='"+id+"']");
	        if(ar.length > 0) r = ar[0]; //get the first element
	    }
	    return r;
	}
	function replaceFormAction(){
	    var processor = "com.catl.part.CreateCatlPartProcessor";
	    var form = getMainForm();
	    
	    !$2('wizardActionClass') ? JCAappendFormHiddenInput(form, 'wizardActionClass' , processor) : $2('wizardActionClass').value= processor;
	    form.action = removeParamFromString("wizardActionClass",form.action);
	    form.action += '&wizardActionClass='+processor;
	}

	 var isrender=false;
	 var containerOid='<%=request.getParameter("ContainerOid")%>';
	 PTC.onReady(function() {
		 console.log(containerOid);
	    replaceFormAction();
	    PTC.attributePanel.on("afterRender", function(panel) {
	        var platformdiv;
	    	if(!isrender){
	    		platformdiv= document.getElementById("CATL_Platform").parentNode.parentNode;
	 	        platformdiv.style.display="none";
	 	        isrender=true;
	 		    platformdiv.innerHTML=platformdiv.innerHTML.replace("\u4ea7\u54c1\u7ebf\u6807\u8bc6","*\u4ea7\u54c1\u7ebf\u6807\u8bc6");
	 			var platform= document.getElementById("CATL_Platform");
	 		    platform.value="";
				Ext.Ajax.request({
				  disableCaching:false,
				  url : "/Windchill/ptc1/require/ishideplatform.do?containerOid="+containerOid,
				  success : function(response, opts) {
				    var data=JSON.parse(response.responseText).data;
				   if(data){
				     platformdiv.style.display="none";
				   }else{
				     platformdiv.style.display="";
				   }
				  }
			     });
	    	}
	    });
	  });
	    
	    
	    PTC.csm.classificationPickerCallBack = function(pickerObject, fieldId, attr, displayFieldId) {
		  	var isMultiPart = false;
		  	var clsnode;
		  	PTC.search.picker.structuredEnumerationCallBack(pickerObject, fieldId, attr, displayFieldId);
		  	PTC.attributePanel.resizeGroupWidth = PTC.attributePanel.resizeGroupWidth.wrap(function(proceed, group,
		  	            resizedWidth) {
		  	    PTC.csm.resizeNestedGroupWidth(group, resizedWidth);
		  	});
		  	insertStep("setClassificationAttributesWizStep" + partObjectHandle);
		  	setStepDirty("setClassificationAttributesWizStep" + partObjectHandle);

		  	// this is to update the DOM for the classification picker field.
		  	// PTC.wizard.saveTableData.callDomChangeListener(document.getElementById(displayFieldId));
		  	PTC.wizard.saveTableData.saveToStore(document.getElementById(displayFieldId));

		  	// delete form content of classification attributes step once the driver
		  	// attribute is changed.
		  	deleteDownstreamFormContent();

		  	//restrict autoNaming for multiPart wizard.
		  	if(document.getElementById("wizType")){
		  		if(document.getElementById("wizType").value == 'multiPart'){
		  				isMultiPart = true;
		  		}
		  	}
		  	PTC.csm.logger.debug(" isMultiPart :: " + isMultiPart);
		  	if(!isMultiPart){
		  		//newly selected value
		  		var currentPickedNode = pickerObject.pickedObject[0].name;  //display name
		  		var isRuleEnforcedLocal = pickerObject.pickedObject[0].enforceAutoNamingRule;
		  		PTC.csm.logger.debug(" processing picker :: " + fieldId);
		  		clsnode = pickerObject.pickedObject[0].internalName;

		  		if(currentPickedNode!=='Node name'){
		  			// process if not empty
		  			PTC.csm.nodeBean = new Object();
		  			// fill bean
		  			PTC.csm.nodeBean.selectedNode = currentPickedNode;
		  			PTC.csm.nodeBean.isRuleEnforced = isRuleEnforcedLocal;
		  			// fill map - it holds fieldId as a key and value as bean consists of {nodeName , isRuleEnforced}.
		  			PTC.csm.logger.debug(" added :: " + fieldId + " into map");
		  			PTC.csm.PickerAndValueMap[fieldId] = PTC.csm.nodeBean;
		  		}

		  		PTC.csm.logger.debug(" map size :: " + Object.keys(PTC.csm.PickerAndValueMap).length);
		  		//This is to decide whether to show (Generated) for name or not.
		  		PTC.csm.logger.debug(" Calling PTC.csm.shouldAutoGeneratePartName .. ");
		  		PTC.csm.shouldAutoGeneratePartName();
		  		
		  		//loadHarnessVariant(pickerObject.pickedObject[0].internalName);
		  		var xmlhttp;
		  		  
		  		var nameList=document.getElementById("name");
		  		var sourceList=document.getElementById("source");
		  		var unitList = document.getElementById("defaultUnit");
				var openMouldList = document.getElementById("OpenMould");
				
		        while (nameList.options.length) {
		        	nameList.remove(0);
		        }
		        
		        while (sourceList.options.length) {
		        	sourceList.remove(0);
		        }
		        
		        while (unitList.options.length) {
		        	unitList.remove(0);
		        }
		        
		        while (openMouldList.options.length) {
		        	openMouldList.remove(0);
		        }
		        
		        if (window.XMLHttpRequest) {
		        // code for IE7+, Firefox, Chrome, Opera, Safari
		          xmlhttp=new XMLHttpRequest();
		        }else {
		          // code for IE6, IE5
		          xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
		        }
		        
		        xmlhttp.onreadystatechange=function() {

		          if (xmlhttp.readyState==4 && xmlhttp.status==200) {
		            var string = (xmlhttp.responseText).replace(/\s+/g,'');
		           // alert(string);
		            var namesource = string.split('qqqq;;;;');
		            if(namesource.length == 4){
		            	var names = namesource[0];
			            var source = namesource[1];
			            var unit = namesource[2];
			            var openMould = namesource[3];
			            
			           // alert(namesource[0]);
			           // alert(namesource[1]);
			            var cars = names.split('|');
			            for (var i=0;i<cars.length;i++) {
			            	var car;
			            	if(cars.length!=1 && i==0){
			            		var car0=new Option("","");
			            		nameList.options.add(car0);
			            	}
			                if (cars[i]=="") {
			                  var dd=decodeURIComponent("NULL");
			                  car=new Option("","");  
			                }else {
			                  car=new Option(cars[i],cars[i]);
			                }
			                nameList.options.add(car);
			              }
			            
			            var sources = source.split('|');
			            for (var i=0;i<sources.length;i++) {
			            	var car;
			            	 if(sources.length!=1 && i==0){
			            		var car0=new Option("","");
			            		sourceList.options.add(car0);
			            	} 
			                if (sources[i]=="") {
			                  var dd=decodeURIComponent("NULL");
			                  car=new Option("","");  
			                }else {
			                  var sourcevalue = sources[i].split(',');
			                  car=new Option(sourcevalue[1],sourcevalue[0]);
			                }
			                sourceList.options.add(car);
			              }
			            
			            var units = unit.split('|');
			            for (var i=0;i<units.length;i++) {
			            	var car;
			            	 if(units.length!=1 && i==0){
			            		var car0=new Option("","");
			            		unitList.options.add(car0);
			            	} 
			                if (units[i]=="") {
			                  var dd=decodeURIComponent("NULL");
			                  car=new Option("","");  
			                }else {
			                  var unitvalue = units[i];
			                  car=new Option(unitvalue,unitvalue=="pcs"?"ea":unitvalue);
			                }
			                unitList.options.add(car);
			              }
			            
			            var openMoulds=new Option(openMould,openMould);
	            		openMouldList.options.add(openMoulds);
		            }else{
		            	alert('\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u68c0\u67e5\u7269\u6599\u7ec4\u540d\u79f0\u91c7\u8d2d\u7c7b\u578b\u56fa\u5316\u8868\u662f\u5426\u5df2\u7ecf\u7ef4\u62a4\uff01');
		            }
		            
		            
		          }
		  		}
		  		xmlhttp.open("GET","netmarkets/jsp/catl/part/loadPartNameSource.jsp?clsnode="+encodeURI(encodeURI(clsnode)),true);
		  		xmlhttp.send();
		  	}
		  };

</script>

<script Language="JavaScript">
		//setUserSubmitFunction(test);
		
		function test() 
		{
			var pathname = window.location.pathname;
	    var splitPathname = pathname.split("/");
	    var wcHome = window.location.protocol + "//" + window.location.host + "/" + splitPathname[1] + "/";
	    var jspName = 'netmarkets/jsp/catl/part/validatecls.jsp';
	    var fullURL = wcHome + jspName;
	    
	    var loader = new ajax.ContentLoader(fullURL, null, null, 'POST', '&oid='+getParamFromQueryString('oid'));
	    var resText = null;
			if (loader.req.readyState == 4 && loader.req.status == 200) 
			{
		    resText = loader.req.responseText;
				//alert(resText.length);
				if(resText.length > 6)
				{
					var r=confirm(resText)
				  if (r==true)
				  {
				    //document.write("You pressed OK!")
				  }
				  else
				  {
				    return false;
				  }
				}
		  }
		  //return false;
		}
		
		
		function getParamFromQueryString(paramToGet) {
			var hostUrl = window.location.search.substring(1);
			var paramValue = new Array();
			var paramValuePairs = hostUrl.split("&");
		
			for (i=0;i<paramValuePairs.length;i++) {
				paramValue = paramValuePairs[i].split("=");
				if (paramValue[0] == paramToGet) {
					var valueToReturn = paramValue[1];
					valueToReturn = valueToReturn.replace(/%3A/g, ':');
					return valueToReturn;
				}
			}
		}
</script>
